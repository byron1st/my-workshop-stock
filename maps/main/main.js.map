{"version":3,"sources":["main/main.js"],"names":["ch","c","baseDBPathForTest","normalize","dbPathForTest","join","dbPathForProduction","getPath","DB_FILE_LIST_LENGTH","dbPath","dbFileList","mainWindow","closeConfirmed","on","initialize","wrapUp","process","platform","quit","EXIT_CONFIRMED","event","store","saveDBFile","BACKUP_DATA","setApplicationMenu","buildFromTemplate","createMainWindow","getInitData","console","log","initStore","width","height","minWidth","minHeight","loadURL","__dirname","productSet","product","eventList","productOrder","locale","getLocale","supportLocales","indexOf","initLocale","preventDefault","webContents","send","EXIT","openDevTools","prepareTestData","readdirSync","length","testDBData","JSON","parse","readFileSync","toString","forEach","date","Date","EMPTY_STORE","existsSync","mkdirSync","sort","prev","next","data","newDBFilePath","now","unlinkSync","pop","unshift","writeFileSync","stringify"],"mappings":"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","file":"../../src/main/main.js","sourcesContent":["'use strict'\n\nimport {app, BrowserWindow, ipcMain, Menu/*, autoUpdater*/} from 'electron'\nimport path from 'path'\nimport fs from 'fs'\n\nimport testMode from './app.mode'\nimport menu from './menu'\nimport * as ch from '../util/ipc.channels'\nimport * as c from '../util/const'\n\nconst baseDBPathForTest = path.normalize('./test/resource')\nconst dbPathForTest = path.join(baseDBPathForTest, 'db')\nconst dbPathForProduction = path.join(app.getPath('userData'), 'db')\n\nconst DB_FILE_LIST_LENGTH = 20\n\n// import os from 'os'\n// const platform = os.platform() + '_' + os.arch()\n// const version = app.getVersion()\n// autoUpdater.setFeedURL('https://lit-bayou-78984.herokuapp.com/update/'+platform+'/'+version)\n\nlet dbPath = ''\nlet dbFileList = []\nlet mainWindow = null\nlet closeConfirmed = false\n\nif (testMode) {\n  dbPath = dbPathForTest\n} else {\n  dbPath = dbPathForProduction\n}\n\napp.on('ready', initialize)\napp.on('will-quit', wrapUp)\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\nipcMain.on(ch.EXIT_CONFIRMED, (event, store) => {\n  closeConfirmed = true\n  saveDBFile(store)\n  app.quit()\n})\nipcMain.on(ch.BACKUP_DATA, (event, store) => {\n  saveDBFile(store)\n})\n\nfunction initialize () {\n  // let isUpdate = autoUpdater.checkForUpdates()\n  // console.log(isUpdate)\n  Menu.setApplicationMenu(Menu.buildFromTemplate(menu))\n  createMainWindow(getInitData())\n}\n\nfunction wrapUp () {\n  console.log('will quit')\n}\n\nfunction createMainWindow (initStore) {\n  mainWindow = new BrowserWindow({\n    width: 995,\n    height: 800,\n    minWidth: 995,\n    minHeight: 600\n  })\n  mainWindow.loadURL('file://' + __dirname + '/../mainwindow/index.html')\n  mainWindow.productSet = initStore.product\n  mainWindow.eventList = initStore.event\n  mainWindow.productOrder = initStore.productOrder\n  let locale = app.getLocale()\n  if (c.supportLocales.indexOf(locale) === -1) {\n    locale = 'en'\n  }\n  mainWindow.initLocale = locale\n  mainWindow.on('closed', () => mainWindow = null)\n  mainWindow.on('close', event => {\n    if (!closeConfirmed) {\n      event.preventDefault()\n      mainWindow.webContents.send(ch.EXIT)\n    }\n  })\n\n  if (testMode) {\n    mainWindow.webContents.openDevTools()\n  }\n}\n\nfunction prepareTestData () {\n  if (fs.readdirSync(dbPathForTest).length === 0) {\n    let testDBData = JSON.parse(fs.readFileSync(path.join(baseDBPathForTest, 'db.test.json')).toString())\n    testDBData.event.forEach(event => event.date = new Date(2016, 1, 3))\n    saveDBFile(testDBData)\n  }\n}\n\nfunction getInitData () {\n  const EMPTY_STORE = {\n    product: {},\n    event: [],\n    productOrder: []\n  }\n  \n  if (testMode) {\n    prepareTestData()\n  } else {\n    if (!fs.existsSync(app.getPath('userData'))) {\n      return EMPTY_STORE\n    } else if (!fs.existsSync(dbPath)) {\n      fs.mkdirSync(dbPath)\n    }\n  }\n\n  dbFileList = fs.readdirSync(dbPath).sort((prev, next) => {\n    if (prev < next) {\n      return 1\n    } else {\n      return -1\n    }\n  })\n\n  if (dbFileList.length === 0) {\n    // run at first time\n    return EMPTY_STORE\n  }\n  return JSON.parse(fs.readFileSync(path.join(dbPath, dbFileList[0])).toString())\n}\n\nfunction saveDBFile (data) {\n  let newDBFilePath = 'db_' + Date.now() + '.json'\n  if (dbFileList.length >= DB_FILE_LIST_LENGTH) {\n    fs.unlinkSync(path.join(dbPath, dbFileList[DB_FILE_LIST_LENGTH - 1]))\n    dbFileList.pop()\n  }\n  dbFileList.unshift(newDBFilePath)\n\n  fs.writeFileSync(path.join(dbPath, newDBFilePath), JSON.stringify(data))\n}"]}