{"version":3,"sources":["mainwindow/container.jsx"],"names":["ch","BACKUP_TIME_INTERVAL","Container","state","text","addChangeListener","_updateState","bind","dispatch","productSet","getCurrentWindow","eventList","productOrder","locale","initLocale","_loadLocale","setInterval","send","BACKUP_DATA","_getStoreData","on","EXIT","dialog","showMessageBox","type","buttons","defaultId","message","cancelId","index","EXIT_CONFIRMED","_","nextState","console","log","setState","getData","JSON","parse","readFileSync","join","__dirname","storeData","product","event","render","document","getElementById"],"mappings":"AAAA;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,E;;AAEZ;;;;;;;;;;;;;;AAEA,IAAMC,uBAAuB,IAAI,EAAJ,GAAS,IAAtC;;IAEMC,S;;;AACJ,uBAAe;AAAA;;AAAA;;AAEb,UAAKC,KAAL,GAAa,EAAb;AACA,UAAKC,IAAL,GAAY,EAAZ;AAHa;AAId;;;;yCACqB;AAAA;;AACpB;AACA,sBAAMC,iBAAN,CAAwB,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAAxB;AACA,2BAAWC,QAAX,4BAAsC;AACpCC,oBAAY,iBAAOC,gBAAP,GAA0BD,UADF;AAEpCE,mBAAW,iBAAOD,gBAAP,GAA0BC,SAFD;AAGpCC,sBAAc,iBAAOF,gBAAP,GAA0BE,YAHJ;AAIpCC,gBAAQ,iBAAOH,gBAAP,GAA0BI;AAJE,OAAtC;AAMA,WAAKV,IAAL,GAAY,KAAKW,WAAL,CAAiB,iBAAOL,gBAAP,GAA0BI,UAA3C,CAAZ;AACAE,kBAAY;AAAA,eAAM,sBAAYC,IAAZ,CAAiBjB,GAAGkB,WAApB,EAAiC,OAAKC,aAAL,EAAjC,CAAN;AAAA,OAAZ,EAA0ElB,oBAA1E;AACA,4BAAYmB,EAAZ,CAAepB,GAAGqB,IAAlB,EAAwB,YAAM;AAC5B,yBAAOC,MAAP,CAAcC,cAAd,CAA6B;AAC3BC,gBAAM,UADqB;AAE3BC,mBAAS,CAAC,OAAKrB,IAAL,CAAU,IAAV,CAAD,EAAkB,OAAKA,IAAL,CAAU,QAAV,CAAlB,CAFkB;AAG3BsB,qBAAW,CAHgB;AAI3BC,mBAAS,OAAKvB,IAAL,CAAU,4BAAV,CAJkB;AAK3BwB,oBAAU;AALiB,SAA7B,EAMG,iBAAS;AACV,cAAIC,UAAU,CAAd,EAAiB;AACf,kCAAYZ,IAAZ,CAAiBjB,GAAG8B,cAApB,EAAoC,OAAKX,aAAL,EAApC;AACD;AACF,SAVD;AAWD,OAZD;AAaD;;;wCACmBY,C,EAAGC,S,EAAW;AAChC,UAAIA,UAAUnB,MAAV,KAAqB,KAAKV,KAAL,CAAWU,MAApC,EAA4C;AAC1C,aAAKT,IAAL,GAAY,KAAKW,WAAL,CAAiBiB,UAAUnB,MAA3B,CAAZ;AACD;AACF;;;6BACS;AACRoB,cAAQC,GAAR,CAAY,KAAK/B,KAAjB;AACA,aACE,kDAAQ,OAAO,KAAKA,KAApB,EAA2B,MAAM,KAAKC,IAAtC,GADF;AAGD;;;mCACe;AACd,WAAK+B,QAAL,CAAc,gBAAMC,OAAN,EAAd;AACD;;;gCACYvB,M,EAAQ;AACnB,aAAOwB,KAAKC,KAAL,CAAW,aAAGC,YAAH,CAAgB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,uBAArB,EAA8C5B,SAAS,OAAvD,CAAhB,CAAX,CAAP;AACD;;;oCACgB;AACf,UAAI6B,YAAY,gBAAMN,OAAN,EAAhB;AACA,aAAO;AACLO,iBAASD,UAAUjC,UADd;AAELmC,eAAOF,UAAU/B,SAFZ;AAGLC,sBAAc8B,UAAU9B;AAHnB,OAAP;AAKD;;;;;;AAGH,mBAASiC,MAAT,CAAgB,8BAAC,SAAD,OAAhB,EAA+BC,SAASC,cAAT,CAAwB,iBAAxB,CAA/B","file":"../../src/mainwindow/container.js","sourcesContent":["/*global document*/\n\n'use strict'\n\nimport React, {Component} from 'react'\nimport ReactDOM from 'react-dom'\nimport {remote, ipcRenderer} from 'electron'\nimport path from 'path'\nimport fs from 'fs'\n\nimport store from './flux/store.main'\nimport dispatcher from '../util/flux/dispatcher'\nimport initActions, {INITIALIZE_STORE} from './flux/actions'\nimport * as ch from '../util/ipc.channels'\n\nimport Window from './components/window'\n\nconst BACKUP_TIME_INTERVAL = 5 * 60 * 1000\n\nclass Container extends Component {\n  constructor () {\n    super()\n    this.state = {}\n    this.text = {}\n  }\n  componentWillMount () {\n    initActions()\n    store.addChangeListener(this._updateState.bind(this))\n    dispatcher.dispatch(INITIALIZE_STORE, {\n      productSet: remote.getCurrentWindow().productSet,\n      eventList: remote.getCurrentWindow().eventList,\n      productOrder: remote.getCurrentWindow().productOrder,\n      locale: remote.getCurrentWindow().initLocale\n    })\n    this.text = this._loadLocale(remote.getCurrentWindow().initLocale)\n    setInterval(() => ipcRenderer.send(ch.BACKUP_DATA, this._getStoreData()), BACKUP_TIME_INTERVAL)\n    ipcRenderer.on(ch.EXIT, () => {\n      remote.dialog.showMessageBox({\n        type: 'question',\n        buttons: [this.text['OK'], this.text['Cancel']],\n        defaultId: 1,\n        message: this.text['Will you quit the program?'],\n        cancelId: 1\n      }, index => {\n        if (index === 0) {\n          ipcRenderer.send(ch.EXIT_CONFIRMED, this._getStoreData())\n        }\n      })\n    })\n  }\n  componentWillUpdate(_, nextState) {\n    if (nextState.locale !== this.state.locale) {\n      this.text = this._loadLocale(nextState.locale)\n    }\n  }\n  render () {\n    console.log(this.state)\n    return (\n      <Window store={this.state} text={this.text}/>\n    )\n  }\n  _updateState () {\n    this.setState(store.getData())\n  }\n  _loadLocale (locale) {\n    return JSON.parse(fs.readFileSync(path.join(__dirname, '/../../public/locales', locale + '.json')))\n  }\n  _getStoreData () {\n    let storeData = store.getData()\n    return {\n      product: storeData.productSet,\n      event: storeData.eventList,\n      productOrder: storeData.productOrder\n    }\n  }\n}\n\nReactDOM.render(<Container />, document.getElementById('react-container'))"]}