{"version":3,"sources":["util/util.js"],"names":["getDateString","getCurrencyValue","isNumeric","date","getFullYear","getMonth","getDate","amount","isNegative","converted","notNegativeAmount","toString","idx","indexOf","length","left","substring","right","n","isNaN","parseFloat","isFinite"],"mappings":"AAAA;;AAEA;;;;;;;;;;QAMgBA,a,GAAAA,a;QAUAC,gB,GAAAA,gB;QA+BAC,S,GAAAA,S;AAzCT,SAASF,aAAT,CAAwBG,IAAxB,EAA8B;AACnC,SAAOA,KAAKC,WAAL,KAAqB,GAArB,IAA4BD,KAAKE,QAAL,KAAkB,CAA9C,IAAmD,GAAnD,GAAyDF,KAAKG,OAAL,EAAhE;AACD;;AAED;;;;;;AAMO,SAASL,gBAAT,CAA2BM,MAA3B,EAAmC;AACxC,MAAIC,aAAaD,SAAS,CAA1B;AACA,MAAIE,kBAAJ;AACA,MAAID,UAAJ,EAAgB;AACd,QAAIE,oBAAoBH,SAAS,CAAC,CAAlC;AACAE,gBAAYC,kBAAkBC,QAAlB,EAAZ;AACD,GAHD,MAGO;AACLF,gBAAYF,OAAOI,QAAP,EAAZ;AACD;;AAED,MAAIC,MAAMH,UAAUI,OAAV,CAAkB,GAAlB,CAAV;AACA,MAAID,QAAQ,CAAC,CAAb,EAAgBA,MAAMH,UAAUK,MAAhB;AAChB,OAAKF,OAAO,CAAZ,EAAeA,MAAM,CAArB,EAAwBA,OAAO,CAA/B,EAAkC;AAChC,QAAIG,OAAON,UAAUO,SAAV,CAAoB,CAApB,EAAuBJ,GAAvB,CAAX;AACA,QAAIK,QAAQR,UAAUO,SAAV,CAAoBJ,GAApB,CAAZ;AACAH,gBAAYM,OAAO,GAAP,GAAaE,KAAzB;AACD;;AAED,MAAIT,UAAJ,EAAgB;AACd,WAAO,MAAMC,SAAb;AACD,GAFD,MAEO;AACL,WAAOA,SAAP;AACD;AACF;;AAED;;;;;;AAMO,SAASP,SAAT,CAAoBgB,CAApB,EAAuB;AAC5B,SAAS,CAACC,MAAMC,WAAWF,CAAX,CAAN,CAAD,IAAyBG,SAASH,CAAT,CAA1B,IAA0CA,MAAM,EAAxD;AACD","file":"../../src/util/util.js","sourcesContent":["'use strict'\n\n/**\n * Gets the date string.\n *\n * @param      {Date}  date    The date\n * @return     {string}  The date string.\n */\nexport function getDateString (date) {\n  return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate()\n}\n\n/**\n * Gets the currency value.\n *\n * @param      {number}  amount  The amount\n * @return     {string} currency string value\n */\nexport function getCurrencyValue (amount) {\n  let isNegative = amount < 0\n  let converted\n  if (isNegative) {\n    let notNegativeAmount = amount * -1\n    converted = notNegativeAmount.toString()\n  } else {\n    converted = amount.toString()\n  }\n\n  let idx = converted.indexOf('.')\n  if (idx === -1) idx = converted.length\n  for (idx -= 3; idx > 0; idx -= 3) {\n    let left = converted.substring(0, idx)\n    let right = converted.substring(idx)\n    converted = left + ',' + right\n  }\n\n  if (isNegative) {\n    return '-' + converted\n  } else {\n    return converted  \n  }\n}\n\n/**\n * Determines if numeric.\n *\n * @param      {string}   n       Number string\n * @return     {boolean}  True if numeric, False otherwise.\n */\nexport function isNumeric (n) {\n  return ((!isNaN(parseFloat(n)) && isFinite(n)) || n === '')\n}"]}